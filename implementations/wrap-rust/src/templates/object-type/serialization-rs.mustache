use std::convert::TryFrom;
use polywrap_wasm_rs::{
    BigInt,
    BigNumber,
    Map,
    Context,
    DecodeError,
    EncodeError,
    Read,
    ReadDecoder,
    Write,
    WriteEncoder,
    JSON,
};
use crate::{{detect_keyword (to_upper type)}};
{{#propertyDeps.length}}

{{/propertyDeps.length}}{{#propertyDeps}}
{{^isEnum}}
use {{crate}}::{{detect_keyword (to_upper type)}};
{{/isEnum}}
{{#isEnum}}
use crate::{
    {{detect_keyword (to_upper type)}},
    get_{{to_lower type}}_value,
    sanitize_{{to_lower type}}_value
};
{{/isEnum}}
{{/propertyDeps}}

pub fn serialize_{{to_lower type}}(args: &{{detect_keyword (to_upper type)}}) -> Result<Vec<u8>, EncodeError> {
    let mut encoder_context = Context::new();
    encoder_context.description = "Serializing (encoding) object-type: {{to_upper type}}".to_string();
    let mut encoder = WriteEncoder::new(&[], encoder_context);
    write_{{to_lower type}}(args, &mut encoder)?;
    Ok(encoder.get_buffer())
}

pub fn write_{{to_lower type}}<W: Write>(args: &{{detect_keyword (to_upper type)}}, writer: &mut W) -> Result<(), EncodeError> {
    {{#properties.length}}
    writer.write_map_length(&{{properties.length}})?;
    {{/properties.length}}
    {{^properties}}
    writer.write_map_length(&0)?;
    {{/properties}}
    {{#properties}}
    writer.context().push("{{name}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing property");
    writer.write_string("{{name}}")?;
    {{#scalar}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&args.{{#detectKeyword}}{{to_lower name}}{{/detectKeyword}})?;
    {{/scalar}}
    {{#array}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&args.{{#detectKeyword}}{{to_lower name}}{{/detectKeyword}}, |writer, item| {
        {{> serialize_array}}
    })?;
    {{/array}}
    {{#map}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&args.{{#detectKeyword}}{{to_lower name}}{{/detectKeyword}}, |writer, key| {
        writer.write_{{#key}}{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}{{/key}}(key)
    }, |writer, value| {
        {{> serialize_map_value}}
    })?;
    {{/map}}
    {{#object}}
    {{#required}}
    {{detect_keyword (to_upper type)}}::write(&args.{{#detectKeyword}}{{to_lower name}}{{/detectKeyword}}, writer)?;
    {{/required}}
    {{^required}}
    if args.{{#detectKeyword}}{{to_lower name}}{{/detectKeyword}}.is_some() {
        {{detect_keyword (to_upper type)}}::write(args.{{#detectKeyword}}{{to_lower name}}{{/detectKeyword}}.as_ref().as_ref().unwrap(), writer)?;
    } else {
        writer.write_nil()?;
    }
    {{/required}}
    {{/object}}
    {{#enum}}
    {{#required}}
    writer.write_i32(&(args.{{#detectKeyword}}{{to_lower name}}{{/detectKeyword}} as i32))?;
    {{/required}}
    {{^required}}
    writer.write_optional_i32(&args.{{#detectKeyword}}{{to_lower name}}{{/detectKeyword}}.map(|f| f as i32))?;
    {{/required}}
    {{/enum}}
    writer.context().pop();
    {{/properties}}
    Ok(())
}

pub fn deserialize_{{to_lower type}}(args: &[u8]) -> Result<{{detect_keyword (to_upper type)}}, DecodeError> {
    let mut context = Context::new();
    context.description = "Deserializing object-type: {{to_upper type}}".to_string();
    let mut reader = ReadDecoder::new(args, context);
    read_{{to_lower type}}(&mut reader)
}

pub fn read_{{to_lower type}}<R: Read>(reader: &mut R) -> Result<{{detect_keyword (to_upper type)}}, DecodeError> {
    let mut num_of_fields = reader.read_map_length()?;

    {{#properties}}
    {{^object}}
    let mut _{{to_lower name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/object}}
    {{#object}}
    {{#required}}
    let mut _{{to_lower name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/required}}
    {{^required}}
    let mut _{{to_lower name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = None;
    {{/required}}
    {{/object}}
    {{#required}}
    let mut _{{to_lower name}}_set = false;
    {{/required}}
    {{/properties}}

    while num_of_fields > 0 {
        num_of_fields -= 1;
        let field = reader.read_string()?;

        match field.as_str() {
            {{#properties}}
            "{{name}}" => {
                reader.context().push(&field, "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "type found, reading property");
                {{#scalar}}
                _{{to_lower name}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}()?;
                {{/scalar}}
                {{#array}}
                _{{to_lower name}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {
                    {{> deserialize_array_nobox}}
                })?;
                {{/array}}
                {{#map}}
                _{{to_lower name}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {
                    reader.read_{{#key}}{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}{{/key}}()
                }, |reader| {
                    {{> deserialize_map_value_nobox}}
                })?;
                {{/map}}
                {{#enum}}
                {{> deserialize_enum}}
                _{{to_lower name}} = value;
                {{/enum}}
                {{#object}}
                {{> deserialize_object_nobox}}
                _{{to_lower name}} = object;
                {{/object}}
                {{#required}}
                _{{to_lower name}}_set = true;
                {{/required}}
                reader.context().pop();
            }
            {{/properties}}
            err => return Err(DecodeError::UnknownFieldName(err.to_string())),
        }
    }
    {{#properties}}
    {{#required}}
    if !_{{to_lower name}}_set {
        return Err(DecodeError::MissingField("{{name}}: {{type}}.".to_string()));
    }
    {{/required}}
    {{/properties}}

    Ok({{detect_keyword (to_upper type)}} {
        {{#properties}}
        {{#detectKeyword}}{{to_lower name}}{{/detectKeyword}}: _{{to_lower name}},
        {{/properties}}
    })
}
